<!DOCTYPE html>
<html>
<head>
    <title>IoTDataVisualizer</title>
    <link rel="stylesheet" type="text/css" href="/stylesheets/styles.css">
</head>
<body>
    <%- include('navbar', {page: '/'}) %>
    <main id="dashboard"></main>
    <script src="/scripts/chart.js"></script>
    <script src="/scripts/chart.plugins.js"></script>
    <script src="/scripts/palette.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const dashboard = document.getElementById('dashboard');
        let charts = {};

        socket.on('data', (data) => {
            //console.log(data);

            const id = data.id;
            let promises = [];

            if (!charts[id]) {
                charts[id] = {
                    chartObject: {},
                    indexOfDevices: {},
                    maxNumberOfPoints: false
                };

                promises.push(
                    fetch(`/chartoptions/${id}`)
                    .then(response => response.json())
                    .then(json => {
                        dashboard.insertAdjacentHTML('beforeend', `<section><canvas id="${id}" width="400" height="150"/></section>`);
                        let ctx = document.getElementById(`${id}`).getContext('2d');

                        charts[id].chartObject = new Chart(ctx, {
                            type: json.type,
                            data: {
                                labels: [],
                                datasets: []
                            },
                            options: json.options
                        });

                        charts[id].maxNumberOfPoints = json.maxNumberOfPoints;
                    })
                );
            }

            Promise.all(promises)
                .then(() => {
                    charts[id].chartObject.data.labels.push(new Date(data.date).toLocaleString('hu-HU'));

                    const devices = Object.keys(data.measurementsOfDevices);
                    const colors = palette('mpn65', devices.length);
                    
                    devices.forEach((device, i) => {
                        let index = charts[id].indexOfDevices[device];

                        if (isNaN(index) /*!charts[id].devices.hasOwnProperty(device)*/) {
                            index = charts[id].chartObject.data.datasets.length;
                            charts[id].indexOfDevices[device] = index;
                            charts[id].chartObject.data.datasets.push({
                                label: device,
                                data: new Array(charts[id].chartObject.data.labels.length - 1).fill(NaN)
                            });
                        }
                       
                        charts[id].chartObject.data.datasets[index].borderColor = `#${colors[i]}`;
                        charts[id].chartObject.data.datasets[index].data.push({
                            t: new Date(data.date),
                            y: data.measurementsOfDevices[device][0]
                        });
                    });

                    if (charts[id].chartObject.data.labels.length - 1 === charts[id].maxNumberOfPoints) {
                        charts[id].chartObject.data.labels.shift();
                        charts[id].chartObject.data.datasets.forEach(dataset => dataset.data.shift());
                    }

                    charts[id].chartObject.update();
                });
        });
    </script>
</body>
</html>