<!DOCTYPE html>
<html>

<head>
    <title>IoTDataVisualizer</title>
</head>

<!-- <body onload="addChart(currID++)"> -->

<body>
    <!-- <main id="dashboard" onclick="addData()"></main> -->
    <main id="dashboard"></main>
    <!-- <button onclick="addDataset()">Add dataset</button> -->
    <script src="/scripts/chart.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        Chart.plugins.register({
            afterDatasetsDraw: function (chart) {
                if (chart.tooltip._active && chart.tooltip._active.length) {
                    var activePoint = chart.tooltip._active[0],
                        ctx = chart.ctx,
                        y_axis = chart.scales['y-axis-0'],
                        x = activePoint.tooltipPosition().x,
                        topY = y_axis.top,
                        bottomY = y_axis.bottom;
                    // draw line
                    ctx.save();
                    ctx.beginPath();
                    ctx.moveTo(x, topY);
                    ctx.lineTo(x, bottomY);
                    ctx.lineWidth = 2;
                    ctx.strokeStyle = '#07C';
                    ctx.stroke();
                    ctx.restore();
                }
            }
        });

        var socket = io();
        let charts = {};
        // var newChart;

        socket.on('data', (data) => {
            //console.log(data);

            const id = data.id;
            let promises = [];

            if (!charts[id]) {
                charts[id] = {
                    chartObject: {},
                    devices: {},
                    maxNumberOfPoints: false
                };

                promises.push(fetch(`/chartoptions/${id}`)
                    .then(response => response.json())
                    .then(json => {
                        document.getElementById('dashboard').insertAdjacentHTML('beforeend', `<section><canvas id="${id}" width="400" height="150"/></section>`);
                        let ctx = document.getElementById(`${id}`).getContext('2d');
                        charts[id].chartObject = new Chart(ctx, {
                            type: json.type,
                            data: {
                                labels: [],
                                datasets: []
                            },
                            options: json.options
                        });

                        charts[id].maxNumberOfPoints = json.maxNumberOfPoints;
                    }));
            }

            Promise.all(promises)
                .then(() => {
                    charts[id].chartObject.data.labels.push(new Date(data.date).toLocaleString());

                    Object.keys(data.devices).forEach(device => {
                        if (!charts[id].devices.hasOwnProperty(device)) {
                            charts[id].devices[device] = charts[id].chartObject.data.datasets.length;
                            charts[id].chartObject.data.datasets.push({
                                label: device,
                                //backgroundColor: 'rgba(255, 99, 0, 0)',
                                //borderColor: 'rgb(255, 99, 0)',
                                data: new Array(charts[id].chartObject.data.labels.length - 1).fill(NaN),
                            });
                        }

                        charts[id].chartObject.data.datasets[charts[id].devices[device]].data.push({
                            t: new Date(data.date),
                            y: data.devices[device][0]
                        });
                    });

                    if (charts[id].chartObject.data.labels.length - 1 === charts[id].maxNumberOfPoints) {
                        charts[id].chartObject.data.labels.shift();
                        charts[id].chartObject.data.datasets.forEach(dataset => dataset.data.shift());
                    }

                    charts[id].chartObject.update();
                });
        });

        // function addData() {
        //     let date = new Date();
        //     newChart.data.labels.push(new Date(date).toLocaleTimeString());
        //     newChart.data.datasets.forEach((dataset) => {
        //         dataset.data.push({
        //             t: new Date(date),
        //             y: Math.floor(Math.random() * 31)
        //         });
        //     });
        //     if (newChart.data.labels.length > 10) {
        //         newChart.data.labels.shift();
        //         newChart.data.datasets.forEach((dataset) => {
        //             dataset.data.shift();
        //         });

        //     }
        //     newChart.update();
        // }
        // function addDataset() {
        //     let date = new Date();
        //     newChart.data.datasets.push({
        //         label: "Hőmérséklet3",
        //         backgroundColor: 'rgba(255, 99, 0, 0)',
        //         borderColor: 'rgb(255, 99, 0)',
        //         data: [...new Array(newChart.data.labels.length - 1).fill(NaN), Math.floor(Math.random() * 31)],
        //     });
        //     newChart.update();
        // }
        // var currID = 1;
        // function addChart(id) {
        //     document.getElementById('dashboard').insertAdjacentHTML('beforeend', `<section><canvas id="${id}" width="400" height="100"/></section>`);
        //     let ctx = document.getElementById(`${id}`).getContext('2d');
        //     newChart = new Chart(ctx, {
        //         type: 'line',
        //         data: {
        //             labels: [],
        //             datasets: [{
        //                 label: "Hőmérséklet1",
        //                 backgroundColor: 'rgba(255, 99, 132, 0)',
        //                 borderColor: 'rgb(255, 99, 132)',
        //                 data: [],
        //             }, {
        //                 label: "Hőmérséklet2",
        //                 backgroundColor: 'rgba(0, 99, 132, 0)',
        //                 borderColor: 'rgb(0, 99, 132)',
        //                 data: [],
        //             }]
        //         },
        //         // Configuration options go here
        //         options: {
        //             tooltips: {
        //                 mode: 'index',
        //                 intersect: false
        //             },
        //             spanGaps: false
        //         }
        //     });
        // }
    </script>
</body>

</html>